/*

给定仅有小写字母组成的字符串数组 A，返回列表中的每个字符串中都显示的全部字符（包括重复字符）组成的列表。例如，如果一个字符在每个字符串中出现 3 次，但不是 4 次，则需要在最终答案中包含该字符 3 次。

你可以按任意顺序返回答案。

示例 1：

输入：["bella","label","roller"]
输出：["e","l","l"]
示例 2：

输入：["cool","lock","cook"]
输出：["c","o"]
*/

class Solution {
public:
	vector<string> commonChars(vector<string>& A)
	{
		vector<string> result;
		if (A.size() == 0) return result;
		int hash[26] = { 0 }; // 用来统计所有字符串里字符出现的最小频率
		for (int i = 0; i < A[0].size(); i++)
		{ // 用第一个字符串给hash初始化
			hash[A[0][i] - 'a']++;
		}
		int hashOtherStr[26] = { 0 }; // 统计除第一个字符串外字符的出现频率
		for (int i = 1; i < A.size(); i++)
		{
			memset(hashOtherStr, 0, 26 * sizeof(int));
			for (int j = 0; j < A[i].size(); j++)
			{
				hashOtherStr[A[i][j] - 'a']++;
			}
			// 更新hash，保证hash里统计26个字符在所有字符串里出现的最小次数
			for (int k = 0; k < 26; k++)
			{
				hash[k] = min(hash[k], hashOtherStr[k]);
			}
		}
		// 将hash统计的字符次数，转成输出形式
		for (int i = 0; i < 26; i++)
		{
			while (hash[i] != 0)
			{ // 注意这里是while，多个重复的字符
				string s(1, i + 'a'); // char -> string
				result.push_back(s);
				hash[i]--;
			}
		}
		return result;
	}
};